{"version":3,"sources":["components/header/Header.js","utils/graph_mutations.js","utils/graph_queries.js","components/eventCard/EventCard.js","components/dashboard/Dashboard.js","components/error/Error.js","components/addEvent/AddEvent.js","components/calendar/Calendar.js","components/event/Event.js","components/dog/Dog.js","components/create/Create.js","utils/apiCalls.js","components/app/App.js","index.js"],"names":["Header","className","to","ADD_NEW_DOG","gql","DELETE_DOG","ADD_NEW_EVENT","UPDATE_EVENT","QUERY_EVERYTHING","EventCard","event","useMutation","refetchQueries","mutateEvent","dog","name","id","Date","eventDatetime","toLocaleString","type","value","onClick","variables","eventId","for","Error","propTypes","PropTypes","object","isRequired","Dashboard","userName","dogs","events","completedEvents","dogList","length","map","eventList","twoEvents","splice","rewards","i","string","arrayOf","error","AddEvent","useState","eventName","setEventName","eventDate","setEventDate","dogId","setDogId","formError","setFormError","addNewEvent","loading","clearInputs","message","placeholder","onChange","target","required","preventDefault","Number","submitEvent","Calendar","Event","matchingEvent","Dog","matchingDog","removeDog","history","useHistory","deleteDog","age","breed","push","handleSubmit","func","Create","userID","setName","setAge","breedType","setBreed","breeds","setBreeds","addDog","useEffect","fetch","headers","then","response","json","data","options","label","min","userId","submitDog","number","App","useQuery","user","setUser","setDogs","setEvents","setCompletedEvents","sortedEvents","sortEvents","filteredEvents","filterEvents","outstanding","completed","dogObject","currentDogs","ind","indexOf","errorCode","listOfEvents","sort","a","b","today","reduce","newObj","currentEvent","exact","path","render","match","find","params","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1dbad29b.chunk.js","sourcesContent":["import './Header.css';\nimport { Link } from 'react-router-dom'\n\nexport const Header = () => {\n  return (\n    <header>\n      <section className='header-container'>\n        <h1 className='title'>Pawty Trainer</h1>\n      </section>\n      <nav>\n        <Link to ='/'>Dashboard</Link>\n        <Link to ='/create'>Add Dog</Link>\n        <Link to ='/add_event'>Add Event</Link>\n        <Link to ='/calendar'>Calendar</Link>\n      </nav>\n    </header>\n  );\n}","import { gql } from \"@apollo/client\";\n\nexport const ADD_NEW_DOG = gql`\n  mutation ($name: String!, $userId: Int!, $breed: String!, $age: Int!) {\n    createDog(input: {\n        name: $name,\n        userId: $userId,\n        breed: $breed,\n        age: $age\n  }) {\n      dog {\n        id\n        userId\n        name\n        breed\n        age\n      }\n      errors\n    }\n  }\n`;\n\nexport const DELETE_DOG = gql`\n  mutation ($id: ID!) {\n    destroyDog(input: {\n      id: $id\n    }) {\n      id\n    }\n  }\n`;\n\nexport const ADD_NEW_EVENT = gql`\n  mutation ($name: String!, $dogId: Int!, $eventDatetime: ISO8601DateTime!){\n    createEvent(input: {\n      name: $name,\n      dogId: $dogId,\n      completed: false,\n      eventDatetime: $eventDatetime,  \n  }) {\n      event {\n        id\n        dogId\n        name\n        completed\n        eventDatetime\n      }\n      errors\n    }\n  }\n`;\n\nexport const UPDATE_EVENT = gql`\n  mutation ($eventId: ID!){\n    updateEvent(\n      input: { \n        id: $eventId, \n        completed: true \n      }) {\n        event {\n          id\n          name\n          completed\n          dogId\n            dog {\n              id\n              name\n              breed\n              age\n                user {\n                  name\n                }\n        }\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\";\n\nexport const QUERY_EVERYTHING = gql`\n  query {\n    user(id: 1) {\n      id\n      name\n    } dogs {\n      id\n      name\n      breed\n      age\n    } events {\n      id\n      name\n      completed\n      eventDatetime\n      dogId\n        dog {\n          name\n          breed\n          age\n          userId\n          user {\n            name\n        }\n      }\n    }\n  }\n`;","import PropTypes from 'prop-types';\nimport './EventCard.css';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { UPDATE_EVENT } from '../../utils/graph_mutations';\nimport { QUERY_EVERYTHING } from '../../utils/graph_queries';\n\nexport const EventCard = ({ event }) => {\n  const [mutateEvent] = useMutation(UPDATE_EVENT, {\n    refetchQueries:[QUERY_EVERYTHING]\n  })\n\n  const handleClick = () => {\n    mutateEvent({\n      variables: {\n        eventId: event.id\n      }\n    })\n  }\n\n  return (\n    <section key={event.id} className=\"event-card\">\n      <ul>\n        <li className=\"dog-name\">{event.dog.name}</li>\n        <li className='event-name'>\n          <Link to={`/event/${event.id}`} key={event.id}>\n            <em>{event.name}</em>\n          </Link>\n        </li>\n        <li className='card-title event-date'>\n          To be completed by {(new Date(event.eventDatetime)).toLocaleString()}\n        </li>\n        <li>\n          <input type='checkbox' id={event.id} value='true' onClick={() => handleClick()}></input>\n          <label for={event.id} className='complete-title' >Complete Event</label>\n        </li>\n      </ul>\n    </section>\n  )\n}\n\nError.propTypes = {\n  event: PropTypes.object.isRequired\n};","import PropTypes from 'prop-types';\nimport './Dashboard.css';\nimport { Link } from 'react-router-dom'\nimport { EventCard } from '../eventCard/EventCard'\n\nexport const Dashboard = ({ userName, dogs, events, completedEvents }) => {\n  let dogList = []\n  if (dogs.length) {\n    dogList = dogs.map(dog => {\n      return (\n        <li className='dog-name-list-container' key={dog.id}>\n          <p className='material-icons'>pets</p>\n          <Link to={`/dog/${dog.id}`}>\n            {dog.name}\n          </Link>\n        </li>\n      )\n    })\n  }\n\n  let eventList = []\n  if (events.length) {\n    let twoEvents = [...events]\n    twoEvents.splice(2)\n    eventList = twoEvents.map(event => {\n      return (\n        <EventCard event={event} key={event.id} />\n      )\n    })\n  }\n\n  let rewards = []\n  if (completedEvents) {\n    rewards = [\"★\"]\n    for (var i = 1; i < completedEvents; i++) {\n      if (!(i % 3)) {\n        rewards = [...rewards, \"★\"];\n      }\n    }\n  }\n\n  if (dogs.length && events.length) {\n    return (\n      <section className=\"dashboard\">\n        <h2>Welcome {userName}!</h2>\n        <p className='rewards'>{rewards}</p>\n        <section className='sections'>\n          <section className='my-dogs'>\n            <h3 className='section-titles'>My Dogs</h3>\n            <ul className='dog-list'>\n              {dogList}\n            </ul>\n          </section>\n          <section className='Upcoming'>\n            <h3 className='section-titles'>Upcoming Events</h3>\n            {eventList}\n          </section>\n        </section>\n      </section>\n    )\n  } if (dogs.length && !events.length) {\n    return (\n      <section className=\"dashboard\">\n        <h2>Welcome {userName}!</h2>\n        <p>{rewards}</p>\n        <section>\n          <section>\n            <h3>My Dogs</h3>\n            <ul className='dog-list-names'>\n              {dogList}\n            </ul>\n          </section>\n          <section>\n            <h3>No Upcoming Events</h3>\n          </section>\n        </section>\n      </section>\n    )\n  } if (!dogs.length && events.length) {\n    return (\n      <section className=\"dashboard\">\n        <h2>Welcome {userName}!</h2>\n        <p>{rewards}</p>\n        <section>   \n          <section>\n            <h3>Add a dog!</h3>\n          </section>\n          <section>\n            <h3>Upcoming Events</h3>\n            {eventList}\n          </section>\n        </section>\n      </section>\n    )\n  } else {\n    return (\n      <section className=\"dashboard\">\n        <h2>Welcome {userName}!</h2>\n        <p>{rewards}</p>\n        <section>\n          <section>\n            <h3>Add a dog!</h3>\n          </section>\n          <section>\n            <h3>No Upcoming Events</h3>\n          </section>\n        </section>\n      </section>\n    )\n  }\n}\n\nError.propTypes = {\n  userName: PropTypes.string.isRequired,\n  dogs: PropTypes.arrayOf(PropTypes.object).isRequired,\n  events: PropTypes.arrayOf(PropTypes.object).isRequired,\n  completedEvents: PropTypes.arrayOf(PropTypes.object).isRequired\n};","import { Link } from 'react-router-dom';\nimport './Error.css';\n\nexport const Error = ({ error }) => {\n  return (\n    <article className='error-container'>\n      <div className='error-div'>\n        <h2 className='error-h2'>{error}</h2>\n        <Link to='/'>\n          <button className='details-back'>Home</button>\n        </Link>\n      </div>\n    </article>\n  )\n}","import PropTypes from 'prop-types';\nimport './AddEvent.css';\nimport { useState } from 'react';\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_NEW_EVENT } from '../../utils/graph_mutations';\nimport { QUERY_EVERYTHING } from '../../utils/graph_queries';\n\nexport const AddEvent = ({ dogs }) => {\n  const [eventName, setEventName] = useState('');\n  const [eventDate, setEventDate] = useState('');\n  const [dogId, setDogId] = useState(0)\n  const [formError, setFormError] = useState('');\n  const [addNewEvent, { loading, error }] = useMutation(ADD_NEW_EVENT, {\n    refetchQueries: [QUERY_EVERYTHING]\n  })\n\n  const submitEvent = (event) => {\n    event.preventDefault();\n    if(eventName && eventDate && dogId) {\n    addNewEvent({\n      variables: {\n        dogId: Number(dogId),\n        name: eventName,\n        eventDatetime: eventDate\n      }\n    })\n    setFormError('')\n    clearInputs()\n    } else {\n      setFormError('Sorry, you must input all fields before creating an event!')\n    }\n  }\n  const clearInputs = () => {\n    setEventName('');\n    setEventDate('');\n    setDogId(0);\n  }\n\n  if (loading) return 'Submitting...';\n  if (error) return `Submission error! ${error.message}`;\n\n  return (\n    <>\n      <form>\n        <h2 className='text'>Add New Event</h2>\n        <input\n          type='text'\n          placeholder='Event Name'\n          value={eventName}\n          onChange={(event)=> setEventName(event.target.value)}\n          required\n        />\n        <label className='text'>Select dog:</label>\n        <select onChange={(event)=> setDogId(event.target.value)}>\n          <option \n            placeholder='Dog Name'\n            key={dogId} \n            value={dogId}\n          >Dog Name\n          </option>\n          {dogs.map(dog => (\n            <option \n              key={dog.id} \n              value={dog.id}\n            >\n              {dog.name}\n          </option>\n          ))}\n        </select>\n        <label className='text'>Set event date:</label>\n        <input\n          type='date'\n          placeholder='EventDateTime'\n          value= {eventDate}\n          onChange={(event)=> setEventDate(event.target.value)}\n          required\n        />\n        <button onClick={event=> submitEvent(event)}>Submit</button>\n        <p>{formError}</p>\n      </form> \n    </>\n  )\n}\n\nError.propTypes = {\n  dogs: PropTypes.arrayOf(PropTypes.object).isRequired\n};","import PropTypes from 'prop-types';\nimport './Calendar.css';\nimport { EventCard } from '../eventCard/EventCard'\n\nexport const Calendar = ({ events }) => {\n\n  let eventList = []\n  if (events.length) {\n    eventList = events.map(event => {\n      return (\n        <EventCard event={event} key={event.id} />\n      )\n    })\n  }\n\n  if (events.length) {\n    return (\n      <section className=\"calendar\">\n        <h2>Calendar</h2>\n        <section>{eventList}</section>\n      </section>\n    )\n  } else {\n    return (\n      <section className=\"calendar\">\n        <h2>Calendar</h2>\n        <p>You have no events scheduled.</p>\n      </section>\n    )\n  }\n}\n\nError.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.object).isRequired\n};","import PropTypes from 'prop-types';\nimport './Event.css';\nimport { Link } from 'react-router-dom';\n\nexport const Event = ({ matchingEvent }) => {\n\n  return (\n    <section className=\"event\">\n      <dl>\n        <dt>Dog</dt>\n        <dd>{matchingEvent.dog.name}</dd>\n\n        <dt>Event Name</dt>\n        <dd>{matchingEvent.name}</dd>\n\n        <dt>Event Date</dt>\n        <dd>{(new Date(matchingEvent.eventDatetime)).toLocaleString()}</dd>\n      </dl>\n      <Link to={'/'} ><button>Home</button></Link>\n    </section>\n  )\n}\n\nError.propTypes = {\n  matchingEvent: PropTypes.object.isRequired\n};","import PropTypes from 'prop-types';\nimport './Dog.css';\nimport { useMutation } from \"@apollo/client\";\nimport { useHistory } from \"react-router-dom\";\nimport { DELETE_DOG } from '../../utils/graph_mutations';\n\nexport const Dog = ({ matchingDog, removeDog }) => {\n  let history = useHistory()\n  const [deleteDog, { loading, error }] = useMutation(DELETE_DOG)\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    deleteDog({\n      variables: {\n        id: Number(matchingDog.id)\n      }\n    })\n    removeDog(matchingDog)\n    history.push(\"/\")\n  }\n\n  if (loading) return 'Submitting...';\n  if (error) return `Submission error! ${error.message}`;\n\n  return (\n    <section className=\"dog-details\">\n      <dl>\n        <dt>Dog Name</dt>\n        <dd>{matchingDog.name}</dd>\n\n        <dt>Dog Age</dt>\n        <dd>{matchingDog.age}</dd>\n\n        <dt>Dog Breed</dt>\n        <dd>{matchingDog.breed}</dd>\n      </dl>\n      <button onClick={event => handleSubmit(event)}>Delete This Dog</button>\n    </section>\n  )\n}\n\nError.propTypes = {\n  matchingDog: PropTypes.object.isRequired,\n  removeDog: PropTypes.func.isRequired\n};","import PropTypes from 'prop-types';\nimport './Create.css';\nimport React, { useState, useEffect } from 'react';\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_NEW_DOG } from '../../utils/graph_mutations';\nimport { QUERY_EVERYTHING } from '../../utils/graph_queries';\nimport { fetchBreeds } from '../../utils/apiCalls';\nimport Select from 'react-select'\n\nexport const Create = ({ userID }) => {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [breedType, setBreed] = useState('');\n  const [formError, setFormError] = useState('')\n  const [breeds, setBreeds] = useState([]);\n  const [addDog, { loading, error }] = useMutation(ADD_NEW_DOG, {\n    refetchQueries: [QUERY_EVERYTHING]\n  })\n\n  useEffect(() => {\n    fetchBreeds()\n      .then(data => setBreeds(data))\n  }, [])\n\n  const submitDog = event => {\n    event.preventDefault();\n    if(name && age && breedType) {\n      addDog({\n        variables: {\n          name: name,\n          userId: userID,\n          breed: breedType,\n          age: Number(age)\n        }\n      });\n      setFormError('')\n      clearInputs()\n\n    } else {\n      setFormError('Sorry, you must input all fields before creating a dog!')\n    } \n  }\n\n  const clearInputs = () => {\n    setName('');\n    setAge('');\n    setBreed('');\n  }\n\n  if (loading) return 'Submitting...';\n  if (error) return `Submission error! ${error.message}`;\n\n  const options = breeds.map(breed => ({label: breed.name, value: breed.name}))\n  options.push({label:'Mixed', value:'Mixed'})\n\n  return(\n    <form className='add-dog'>\n      <h2 className='train-dog-title text'>Train your dog!</h2>\n      <input\n        type='text'\n        placeholder='Name'\n        name = 'name'\n        value= {name}\n        onChange={(event)=> setName(event.target.value)}\n        required\n      />\n      <input\n        type='number'\n        placeholder='Age'\n        name = 'age'\n        min='0'\n        value= {age}\n        onChange={(event)=> setAge(event.target.value)}\n        required\n      />\n      <label className='text'>Select Breed:</label>\n      <Select\n        className='select'\n        options = {options}\n        onChange={(event) => setBreed(event.value)}\n      />\n      <button onClick={event => submitDog(event)}>Create</button>\n      <p>{formError}</p>\n    </form>  \n  )\n}\n\nError.propTypes = {\n  userID: PropTypes.number.isRequired\n};","export const fetchBreeds = () => {\n  return fetch('https://api.thedogapi.com/v1/breeds', {\n    headers: {\n      'X-Api-Key': '519cd25b-a229-4cd2-a69c-ebcd7d8dea4f'\n    }\n  })\n    .then((response) => response.json())\n}","import React, { useState, useEffect } from 'react';\nimport { useQuery } from \"@apollo/client\";\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport { Header } from '../header/Header';\nimport { Dashboard } from '../dashboard/Dashboard'\nimport { Error } from '../error/Error'\nimport { AddEvent } from '../addEvent/AddEvent'\nimport { Calendar } from '../calendar/Calendar'\nimport { Event } from '../event/Event'\nimport { Dog } from '../dog/Dog'\nimport { Create } from '../create/Create';\nimport { QUERY_EVERYTHING } from '../../utils/graph_queries';\n\nexport const App = () => {\n  const { loading, error, data } = useQuery(QUERY_EVERYTHING)\n  const [user, setUser] = useState({});\n  const [dogs, setDogs] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [completedEvents, setCompletedEvents] = useState(0);\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUser(data.user)\n      setDogs(data.dogs)\n      let sortedEvents = sortEvents(data.events)\n      let filteredEvents = filterEvents(sortedEvents)\n      setEvents(filteredEvents.outstanding)\n      setCompletedEvents(filteredEvents.completed.length)\n    }\n  }, [data, loading])\n\n  const removeDog = (dogObject) => {\n    let currentDogs = [...dogs]\n    let ind = currentDogs.indexOf(dogObject)\n    currentDogs.splice(ind, 1)\n    setDogs([...currentDogs])\n  }\n\n  if (loading) {\n    return (\n      <>\n        <Header />\n        <p>Loading...</p>\n      </>\n    )\n  }\n\n  if (error) {\n    return (\n      <>\n        <Header />\n        <Error errorCode={error} />\n      </>\n    )\n  }\n\n  const sortEvents = (listOfEvents) => {\n    let spreadArray = [...listOfEvents]\n    return spreadArray.sort((a, b) => {\n      return new Date(a.eventDatetime) - new Date(b.eventDatetime)\n    })\n  }\n\n  const filterEvents = (events) => {\n    let today = new Date()\n    let spreadArray = [...events]\n    return spreadArray.reduce((newObj, currentEvent) => {\n      if (currentEvent.completed) {\n        newObj.completed = [...newObj.completed, currentEvent]\n      }\n      if (!currentEvent.completed &&\n        new Date(currentEvent.eventDatetime) >= today) {\n        newObj.outstanding = [...newObj.outstanding, currentEvent]\n      }\n      return newObj\n    }, { completed: [], outstanding: [] })\n  }\n\n  if (data) {\n    return (\n      <>\n        <Header />\n        <main>\n          <Switch>\n            <Route exact path='/' render={() =>\n              <Dashboard\n                userName={user.name}\n                dogs={dogs}\n                events={events}\n                completedEvents={completedEvents}\n              /> \n            }/>\n\n            <Route path='/create'>\n              <Create userID={1} />\n            </Route>\n\n            <Route path='/add_event'>\n              <AddEvent dogs={dogs} />\n            </Route>\n\n            <Route path='/calendar'>\n              <Calendar events={events} />\n            </Route>\n\n            <Route path='/dog/:id' render={({ match }) => {\n              let matchingDog = dogs.find(dog => dog.id === match.params.id);\n              if (!matchingDog) {\n                return (<div>Couldn't find this dog.</div>);  \n              }\n              return <Dog matchingDog={matchingDog} removeDog={removeDog} />\n            }} />\n\n            <Route path='/event/:id' render={({ match }) => {\n              let matchingEvent = events.find(event => event.id === match.params.id);\n              if (!matchingEvent) {\n                return (<div>Couldn't find this event.</div>);  \n              }\n              return <Event matchingEvent={matchingEvent} />\n            }} />\n\n            <Route exact path='/404' render={() =>\n              <Error errorCode={404} />\n            }/>\n            \n            <Redirect to='/404' />\n          </Switch>\n        </main>\n      </>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app/App';\nimport { HashRouter } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://pawty-trainer-api.herokuapp.com/graphql\",\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <HashRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}